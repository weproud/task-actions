version: 1
kind: task
id: jwt
name: JWT 인증 구현
description: JWT 기반 인증 시스템을 구현합니다
status: todo
jobs:
  workflow: "task-actions-ai Feature Development 작업을 수행한다.

feature/ prefix를 사용하여 적절한 브랜치명을 생성하고, 최신 main/develop 브랜치에서 새 브랜치를 생성하여 체크아웃합니다.

프로젝트의 테스트를 실행합니다.

다음 단계를 수행하세요:
1. 테스트 환경 설정 확인
2. 패키지 의존성 설치 확인
3. 단위 테스트 실행
4. 통합 테스트 실행 (있는 경우)
5. 테스트 결과 보고
6. 테스트 실패 시 원인 분석 및 해결 방안 제시

테스트 명령어는 package.json의 scripts를 우선 확인하고, 프로젝트에 맞는 테스트 프레임워크를 사용하세요.

변경된 파일들을 확인하고 스테이징한 후, 의미 있는 커밋 메시지(feat:, fix:, docs: 등 컨벤션 사용)와 함께 커밋을 실행합니다.


현재 브랜치의 변경사항을 원격 저장소에 푸시하고, 필요시 upstream을 설정합니다.

명확한 제목과 설명으로 PR을 작성하고, 적절한 리뷰어와 라벨을 설정하여 Pull Request를 생성합니다.

Slack 채널에 메시지를 전송합니다.

다음 정보가 필요합니다:
- SLACK_WEBHOOK_URL 환경 변수에 설정된 Slack 웹훅 URL
- 전송할 메시지 내용
- 선택사항: 메시지 형식 (일반 텍스트, 마크다운, JSON 등)

다음 단계를 수행하세요:
1. 환경 변수에서 SLACK_WEBHOOK_URL 확인
2. 메시지 형식 및 내용 준비
3. HTTP POST 요청으로 Slack 웹훅에 메시지 전송
4. 전송 결과 확인 및 오류 처리

SLACK_WEBHOOK_URL 환경 변수가 설정되어 있지 않으면 사용자에게 설정을 요청하세요.

예시 메시지 형식:
{
  "text": "메시지 내용",
  "channel": "#general",
  "username": "Bot",
  "icon_emoji": ":robot_face:"
}

curl 예시:
curl -X POST -H 'Content-type: application/json' \
--data '{"text":"Hello, World!"}' \
${SLACK_WEBHOOK_URL}"
  rules:
    - "task-actions-ai 개발 시 다음 규칙을 따르세요:
- TypeScript, ESLint, Prettier 사용으로 코드 품질 보장
- 의미있는 커밋 메시지와 feature/ prefix 브랜치 사용  
- Pull Request를 통한 코드 리뷰 필수
- 문서화(README, 주석, API 문서) 유지
- 복잡한 작업시 sequential-thinking, context7, playwright 활용
"
  mcps:
    - "복잡한 문제나 태스크 해결 시 sequential-thinking을 활용합니다. 문제를 단계별로 분해하고, 논리적 순서로 접근하여 반복적으로 개선해나갑니다."
    - "라이브러리나 프레임워크 사용 시 Context7을 활용합니다. 최신 버전의 공식 문서를 참조하여 정확한 구현과 베스트 프랙티스를 따릅니다.
"
    - "Playwright를 사용한 브라우저 자동화 및 E2E 테스트를 수행합니다. 사용자 시나리오 기반 테스트 작성, 크로스 브라우저 테스트, 성능 및 접근성 테스트를 포함합니다."
systemprompt: "주어진 요구사항을 분석하여 기능을 구현하고 테스트합니다. 
		기술 스택, 아키텍처, API 설계를 고려하여 개발하세요"
prompt: "<여기에 태스크 설명을 입력하세요>
		JWT 기반 인증 시스템을 구현합니다"
